from helpers import date_to_string
from helpers import date_string_to_date
from helpers import load_file_content
from helpers import return_random_unique_values_from_list
from helpers import substitute_template_variables
from products_params import products

import datetime
import os
import random


# insert into {{table_name}} (date,customer_id,invoice_id,product_id,number_items,price_per_item) values ('{{date}}',{{customer_id}},{{product_id}},{{invoice_id}},{{number_items}},{{price_per_item}});
def create_insert_statement_invoices(database_system, table_name,
                                     date, customer_id, product_id, invoice_id, number_items, price_per_item):
    insert_statement = load_file_content(
        'templates/insert_table_invoices_' + database_system + '.txt')

    insert_statement = substitute_template_variables(insert_statement,
                                                     [
                                                         '{{table_name}}',
                                                         '{{date}}',
                                                         '{{customer_id}}',
                                                         '{{product_id}}',
                                                         '{{invoice_id}}',
                                                         '{{number_items}}',
                                                         '{{price_per_item}}'
                                                     ],
                                                     [
                                                         table_name,
                                                         date,
                                                         customer_id,
                                                         product_id,
                                                         invoice_id,
                                                         number_items,
                                                         price_per_item
                                                     ])
    return insert_statement
def create_table_statement_invoices(template_dir, database_system, table_name):
    create_table_invoices_statement = load_file_content(
        os.path.join(template_dir, 'create_table_invoices' + '_' + database_system + '.txt'))
    create_table_invoices_statement = substitute_template_variables(create_table_invoices_statement,
                                                                   ['{{table_name}}'],
                                                                   [table_name])
    return create_table_invoices_statement

def populate_table_invoices(customer_data, product_data,start_date, end_date,probability_invoice_per_customer_id_per_day,
                            minimum_number_different_products_per_invoice,maximum_number_different_products_per_invoice,
                            minimum_number_items_per_product, maximum_number_items_per_product):
    """
    Random data for the invoices table.
    For parameters with minimum number and maximum number, the actual number will be chosen randomly between both
    to ensure that the generated data are not too similar.
    :param customer_data: The created data for the customers table (generated by call to function populate_table_customers in customers.py
    :param product_data: The created data for the products table (generated by call to function populate_table_products in products.py)
    :param start_date: The start date for the random invoice data to generated (string in format yyyy-MM-dd)
    :param end_date: The end date for the random invoice data to be generated (string in format yyyy-MM-dd)
    :param probability_invoice_per_customer_id_per_day: The probability of generating an invoice for a single customer_id per day
    :param minimum_number_different_products_per_invoice: The number of minimum different products per invoice
    :param maximum_number_different_products_per_invoice: The number of maximum different products per invoice
    :param minimum_number_items_per_product: The minimum number of items for each different product
    :param maximum_number_items_per_product: The maximum number of items for each different product
    :return: A list of tuples with the following elements:
    0: date (text) - Date of invoice
    1: customer_id (integer) - The customer_id
    2: invoice_id (integer) - The invoice id
    3: product_id (integer) - The product id
    4: number_items (integer) - The number of items for the product id in the generated invoice
    5: price_per_item (double) - The price per item for a given product_id in the generated invoice
    """
    generated_invoice_items = []
    list_customer_ids = []
    list_product_ids = []
    product_ids_prices = {}
    product_names_product_prices = {}
    for product in products:
        product_names_product_prices[product[0]] = product[2]
    for customer in customer_data:
        customer_id = customer.customer_id
        list_customer_ids.append(customer_id)

    for product in product_data:
        list_product_ids.append(product[0])
        product_ids_prices[product[0]] = product_names_product_prices[product[2]]

    start_date_as_date = date_string_to_date(start_date)
    end_date_as_date = date_string_to_date(end_date)
    delta = datetime.timedelta(days=1)
    current_primary_key_invoice_id = 1

    # Check parameters
    if start_date_as_date > end_date_as_date:
        raise ValueError("Start date must be smaller than end date")

    if probability_invoice_per_customer_id_per_day <= 0.0 or probability_invoice_per_customer_id_per_day > 1.0:
        raise ValueError("Probability of invoice per customer_id per day must be greater than 0 and not greater than 1")

    if minimum_number_different_products_per_invoice > maximum_number_different_products_per_invoice:
        raise ValueError("Minimum number of different products per invoice must be less or equal to maximum number of different products per invoice")

    if minimum_number_items_per_product > maximum_number_items_per_product:
        raise ValueError("Minimum number of items per products must be less or equal to maximum number of items per product")

    while start_date_as_date <= end_date_as_date:
        for customer_id in list_customer_ids:
            random_number = random.random()
            if random_number <= probability_invoice_per_customer_id_per_day:
                date_of_invoice = date_to_string(start_date_as_date)
                number_different_products_per_invoice = random.randint(minimum_number_different_products_per_invoice,maximum_number_different_products_per_invoice)
                random_product_ids = return_random_unique_values_from_list(list_product_ids, number_different_products_per_invoice)
                for product_id in random_product_ids:
                    number_items_per_product = random.randint(minimum_number_items_per_product, maximum_number_items_per_product)
                    invoice_item = (date_of_invoice,customer_id,current_primary_key_invoice_id,product_id,number_items_per_product,product_ids_prices[product_id])
                    generated_invoice_items.append(invoice_item)

                current_primary_key_invoice_id += 1



        start_date_as_date += delta

    return generated_invoice_items