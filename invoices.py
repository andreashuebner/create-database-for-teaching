from helpers import date_string_to_date
from helpers import load_file_content
from helpers import substitute_template_variables

import datetime
import os

def create_table_statement_invoices(template_dir, database_system, table_name):
    create_table_invoices_statement = load_file_content(
        os.path.join(template_dir, 'create_table_invoices' + '_' + database_system + '.txt'))
    create_table_invoices_statement = substitute_template_variables(create_table_invoices_statement,
                                                                   ['{{table_name}}'],
                                                                   [table_name])
    return create_table_invoices_statement

def populate_table_invoices(customer_data, product_data,start_date, end_date,probability_invoice_per_customer_id_per_day,
                            average_number_different_products_per_invoice,average_number_items_per_product):
    """
    Random data for the invoices table.
    :param customer_data: The created data for the customers table (generated by call to function populate_table_customers in customers.py
    :param product_data: The created data for the products table (generated by call to function populate_table_products in products.py)
    :param start_date: The start date for the random invoice data to generated (string in format yyyy-MM-dd)
    :param end_date: The end date for the random invoice data to be generated (string in format yyyy-MM-dd)
    :param probability_invoice_per_customer_id_per_day: The probability of generating an invoice for a single customer_id per day
    :param average_number_different_products_per_invoice: The average number of different products per invoice
    :param average_number_items_per_product: The average number of items for each different product
    :return: A list of tuples with the following elements:
    0: date (text) - Date of invoice
    1: customer_id (integer) - The customer_id
    2: invoice_id (integer) - The invoice id
    3: product_id (integer) - The product id
    4: number_items (integer) - The number of items for the product id in the generated invoice
    5: price_per_item (double) - The price per item for a given product_id in the generated invoice
    """
    generated_invoice_items = []
    list_customer_ids = []
    list_product_ids = []
    for customer in customer_data:
        customer_id = customer.customer_id
        list_customer_ids.append(customer_id)

    for product in product_data:
        list_product_ids.append(product[0])

    start_date_as_date = date_string_to_date(start_date)
    end_date_as_date = date_string_to_date(end_date)
    delta = datetime.timedelta(days=1)
    while start_date_as_date <= end_date_as_date:
        start_date_as_date += delta

    return generated_invoice_items